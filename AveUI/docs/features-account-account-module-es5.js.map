{"version":3,"sources":["webpack:///src/app/features/account/account-info/account-info.component.ts","webpack:///src/app/features/account/account-info/account-info.component.html","webpack:///src/app/features/account/account-routing.module.ts","webpack:///src/app/features/account/account.module.ts","webpack:///src/app/features/account/doctor-account/doctor-account.component.ts","webpack:///src/app/features/account/doctor-account/doctor-account.component.html"],"names":["AccountInfoComponent","formBuilder","accountService","toastr","dialog","destroy$","getAccountInfo","pipe","subscribe","res","accountInfo","createForm","initForm","accountForm","valid","updateAccountInfo","value","success","markAsUntouched","Object","assign","markAllAsTouched","group","userName","required","email","get","setValue","next","complete","selector","templateUrl","styleUrls","routes","path","redirectTo","pathMatch","component","AccountRoutingModule","forChild","imports","exports","AccountModule","declarations","DoctorAccountComponent","medicalInstitutions","editable","getMedicalInstitutions","initFilter","doctorForm","medicalInstitutionId","name","warning","updateDoctorInfo","id","doctorInfo","userId","firstName","lastName","license","phone","address","element","medicalInstitutionOptions","valueChanges","state","_filterStates","slice","filterValue","toLowerCase","filter","indexOf"],"mappings":"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","file":"features-account-account-module-es5.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { AccountService } from '../api/account.service.';\nimport { IAccountInfo } from 'src/app/core/interfaces/account-info.interface';\n\n@Component({\n  selector: 'app-account-info',\n  templateUrl: './account-info.component.html',\n  styleUrls: ['./account-info.component.scss']\n})\nexport class AccountInfoComponent implements OnInit, OnDestroy {\n\n\n  accountInfo: IAccountInfo;\n  accountForm: FormGroup;\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private accountService: AccountService,\n              private toastr: ToastrService,\n              public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.getAccountInfo();\n  }\n\n  getAccountInfo(): void {\n    this.accountService.getAccountInfo()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        if (res) {\n          this.accountInfo = res;\n          this.createForm();\n          this.initForm();\n        }\n      });\n  }\n\n  onSubmit(): void {\n    if (this.accountForm.valid) {\n      this.accountService.updateAccountInfo(this.accountForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(() => {\n          this.toastr.success('AccountInfo update succesful!');\n          this.accountForm.markAsUntouched();\n          Object.assign(this.accountInfo, this.accountForm.value);\n        });\n    } else {\n      this.accountForm.markAllAsTouched();\n    }\n  }\n\n  createForm(): void  {\n    this.accountForm = this.formBuilder.group({\n      userName: [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n    });\n  }\n\n  initForm(): void {\n    this.accountForm.get('userName').setValue(this.accountInfo.userName);\n    this.accountForm.get('email').setValue(this.accountInfo.email);\n    this.accountForm.markAsUntouched();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<br>\n<div class=\"m-5\">\n  <mat-card class=\"pane\">\n    <h2> {{ 'Account-Info' | translate }}</h2>\n    <form [formGroup]=\"accountForm\" *ngIf=\"accountInfo\">\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group pt-3\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label> {{ 'UserName' | translate }} </mat-label>\n              <input placeholder=\"Type user name...\" matInput  type=\"text\" formControlName=\"userName\">\n            </mat-form-field>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group pt-3\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label> {{ 'Email' | translate }} </mat-label>\n              <input placeholder=\"Type email...\" matInput  type=\"text\" formControlName=\"email\">\n            </mat-form-field>\n          </div>\n        </div>\n      </div>\n    </form>\n    <mat-card-actions  *ngIf=\"accountInfo && accountForm.touched\">\n      <button mat-button color=\"primary\" (click)=\"onSubmit()\"> {{ 'Update' | translate }}  </button>\n      <button mat-button color=\"warn\" type=\"button\" (click)=\"initForm()\"> {{ 'Cancel' | translate }} </button>\n    </mat-card-actions>\n  </mat-card>\n  <ng-container *ngIf=\"accountInfo?.patient\">\n    <app-patient-account [patientInfo]=\"accountInfo.patient\" [editable]=\"true\"></app-patient-account>\n  </ng-container>\n  <ng-container *ngIf=\"accountInfo?.doctor\">\n    <app-doctor-account [doctorInfo]=\"accountInfo.doctor\" [editable]=\"true\"></app-doctor-account>\n  </ng-container>\n\n</div>\n","import { PatientListComponent } from './patient-list/patient-list.component';\nimport { AccountInfoComponent } from './account-info/account-info.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'info' , pathMatch: 'prefix'},\n  { path: 'info', component: AccountInfoComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccountRoutingModule } from './account-routing.module';\nimport { PatientAccountComponent } from './patient-account/patient-account.component';\nimport { DoctorAccountComponent } from './doctor-account/doctor-account.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { AccountInfoComponent } from './account-info/account-info.component';\nimport { PatientListComponent } from './patient-list/patient-list.component';\nimport { ConfidantsComponent } from './confidants/confidants.component';\n\n\n@NgModule({\n  declarations: [\n    AccountInfoComponent,\n    PatientAccountComponent,\n    DoctorAccountComponent,\n    PatientListComponent,\n    ConfidantsComponent],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    SharedModule\n  ]\n})\nexport class AccountModule { }\n","import { IDoctor } from './../../../core/interfaces/doctor.interface';\nimport { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { map, startWith, takeUntil } from 'rxjs/operators';\nimport { SystemRecordStatus } from 'src/app/core/extension/record.enum';\nimport { configureToastr, toastrTitle } from 'src/app/core/helper';\nimport { IRecord } from 'src/app/core/interfaces/record.interface';\nimport { ISelectInfo } from 'src/app/core/interfaces/select-info.interface';\nimport { AccountService } from '../api/account.service.';\n\n@Component({\n  selector: 'app-doctor-account',\n  templateUrl: './doctor-account.component.html',\n  styleUrls: ['./doctor-account.component.scss']\n})\nexport class DoctorAccountComponent implements OnInit, OnDestroy {\n\n  @Input() doctorInfo: IDoctor;\n  doctorForm: FormGroup;\n  medicalInstitutions: ISelectInfo[] = [];\n  medicalInstitutionOptions: Observable<ISelectInfo[]>;\n  @Input() editable = false;\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private accountService: AccountService,\n              private toastr: ToastrService,\n              public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.createForm();\n    this.initForm();\n    this.getMedicalInstitutions();\n    configureToastr(this.toastr);\n  }\n\n  getMedicalInstitutions(): void {\n    this.accountService.getMedicalInstitutions()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        this.medicalInstitutions = res;\n        this.initFilter();\n      });\n  }\n\n  onSubmit(): void {\n    if (this.doctorForm.valid) {\n      const medicalInstitutionId = this.doctorForm.get('medicalInstitutionId').value;\n\n      if (!(medicalInstitutionId && medicalInstitutionId?.name)) {\n        this.toastr.warning('Please chose medical institution!');\n        return;\n      }\n      this.accountService.updateDoctorInfo({\n        id: this.doctorInfo.id,\n        userId: this.doctorInfo.userId,\n        ...this.doctorForm.value,\n        medicalInstitutionId: medicalInstitutionId.id\n      })\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(() => {\n          this.toastr.success('Doctor info updated');\n          Object.assign(this.doctorInfo, this.doctorForm.value);\n          this.doctorInfo.medicalInstitutionId = medicalInstitutionId.id;\n          this.doctorForm.markAsUntouched();\n        });\n    } else {\n      this.doctorForm.markAllAsTouched();\n    }\n  }\n\n  createForm(): void  {\n    this.doctorForm = this.formBuilder.group({\n      firstName: [null, Validators.required],\n      lastName: [null, Validators.required],\n      license: [null, Validators.required],\n      phone: [null, Validators.required],\n      address: [null, Validators.required],\n      medicalInstitutionId: [null, Validators.required],\n    });\n  }\n\n  initForm(): void {\n    this.doctorForm.get('firstName').setValue(this.doctorInfo.firstName);\n    this.doctorForm.get('lastName').setValue(this.doctorInfo.lastName);\n    this.doctorForm.get('license').setValue(this.doctorInfo.license);\n    this.doctorForm.get('phone').setValue(this.doctorInfo.phone);\n    this.doctorForm.get('medicalInstitutionId').setValue(this.doctorInfo.medicalInstitutionId);\n    this.doctorForm.markAsUntouched();\n  }\n\n  displayFn(element: ISelectInfo): string {\n    return element?.name;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initFilter() {\n    this.medicalInstitutionOptions = this.doctorForm.get('medicalInstitutionId').valueChanges\n    .pipe(\n      startWith(null),\n      map(state => state ? this._filterStates(state) : this.medicalInstitutions.slice())\n    );\n  }\n\n  private _filterStates(value): any[] {\n    const filterValue = value && value.name ? value.name.toLowerCase() : value?.toLowerCase();\n\n    return this.medicalInstitutions.filter(element => element.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","<br>\n<div class=\"row m-2\">\n  <div class=\"col-6\">\n    <mat-card class=\"pane\">\n      <h2> {{ 'Doctor-Info' | translate }}</h2>\n      <form [formGroup]=\"doctorForm\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'First-Name' | translate }} </mat-label>\n                    <input placeholder=\"Type first name...\" matInput  type=\"text\" formControlName=\"firstName\">\n                  </mat-form-field>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'Last-Name' | translate }} </mat-label>\n                    <input placeholder=\"Type last name ...\" matInput  type=\"text\" formControlName=\"lastName\">\n                  </mat-form-field>\n                </div>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'License' | translate }} </mat-label>\n                    <input placeholder=\"Type license...\" matInput  type=\"text\" formControlName=\"license\">\n                  </mat-form-field>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'Phone' | translate }} </mat-label>\n                    <input placeholder=\"Type phone...\" matInput  type=\"text\" formControlName=\"phone\">\n                  </mat-form-field>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"row\">\n              <div class=\"col-md-6\" *ngIf=\"medicalInstitutions\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'Medical-Institution' | translate }} </mat-label>\n                    <input placeholder=\"Search...\"\n                          matInput\n                          type=\"text\"\n                          formControlName=\"medicalInstitutionId\"\n                          [matAutocomplete]=\"auto\">\n                    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n                      <mat-option *ngFor=\"let option of medicalInstitutionOptions | async\" [value]=\"option\">\n                        {{option.name}}\n                      </mat-option>\n                    </mat-autocomplete>\n                  </mat-form-field>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n      <mat-card-actions  *ngIf=\"doctorInfo && doctorForm.touched\">\n        <button mat-button color=\"primary\" (click)=\"onSubmit()\"> {{ 'Update' | translate }}  </button>\n        <button mat-button color=\"warn\" type=\"button\" (click)=\"initForm()\"> {{ 'Cancel' | translate }} </button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n  <div class=\"col-12 pt-3\" *ngIf='editable'>\n    <app-confidants [isPatient]='false' [list]=\"true\" [searchActive]=\"false\"></app-confidants>\n  </div>\n</div>\n"]}