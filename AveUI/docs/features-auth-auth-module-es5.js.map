{"version":3,"sources":["webpack:///src/app/features/auth/auth-routing.module.ts","webpack:///src/app/features/auth/auth-stage/auth-stage.component.ts","webpack:///src/app/features/auth/auth-stage/auth-stage.component.html","webpack:///src/app/features/auth/auth.module.ts","webpack:///src/app/features/auth/sign-in/sign-in.component.ts","webpack:///src/app/features/auth/sign-in/sign-in.component.html","webpack:///src/app/features/auth/sign-up/sign-up.component.ts","webpack:///src/app/features/auth/sign-up/sign-up.component.html"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthStageComponent","signIn","clearForm","signUp","event","tabGroup","selectedIndex","onTabChanged","openSignIn","selector","templateUrl","styleUrls","AuthModule","declarations","SignInComponent","formBuilder","route","router","authenticationService","toastr","loading","destroy$","currentUserValue","navigate","generateForm","returnUrl","snapshot","queryParams","loginForm","group","email","required","password","reset","valid","login","pipe","subscribe","success","error","markAllAsTouched","next","complete","controls","onSubmit","SignUpComponent","authService","selectedRole","roles","medicalInstitutions","currentUser","x","rolesKeys","Object","keys","er_role","Admin","createForm","getMedicalInstitutions","res","initFilter","value","Patient","signUpForm","patientForm","createUserAccount","Doctor","doctorForm","medicalInstitutionId","get","id","recordingAvailable","firstName","lastName","license","phone","element","name","roleForm","registration","role","userName","country","passport","address","filteredOptions","valueChanges","state","_filterStates","slice","filterValue","toLowerCase","filter","indexOf"],"mappings":"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","file":"features-auth-auth-module-es5.js","sourcesContent":["import { AuthStageComponent } from './auth-stage/auth-stage.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  { path: '', component: AuthStageComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTabGroup } from '@angular/material/tabs';\nimport { SignInComponent } from '../sign-in/sign-in.component';\nimport { SignUpComponent } from '../sign-up/sign-up.component';\n\n@Component({\n  selector: 'app-auth-stage',\n  templateUrl: './auth-stage.component.html',\n  styleUrls: ['./auth-stage.component.scss']\n})\nexport class AuthStageComponent implements OnInit {\n\n  @ViewChild(SignInComponent) signIn: SignInComponent;\n  @ViewChild(SignUpComponent) signUp: SignUpComponent;\n  @ViewChild('tabs') tabGroup: MatTabGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onTabChanged(): void {\n    this.signIn.clearForm();\n    this.signUp.clearForm();\n  }\n\n  openSignIn(event: any): void {\n    this.tabGroup.selectedIndex = 2;\n  }\n}\n","\n<div class=\"background\">\n  <div class=\"d-flex justify-content-center\" style=\"overflow: hidden;\">\n    <mat-card style=\"overflow: hidden;\" class=\"mt-5\">\n      <mat-tab-group  #tabs style=\"overflow: hidden;\" mat-stretch-tabs (selectedTabChange)=\"onTabChanged()\">\n        <mat-tab label=\"Sign Up\">\n          <app-sign-up style=\"overflow: hidden;\" (openSignIn)=\"openSignIn($event)\"></app-sign-up>\n        </mat-tab>\n        <mat-tab label=\"Sign In\">\n          <app-sign-in></app-sign-in>\n        </mat-tab>\n      </mat-tab-group>\n    </mat-card>\n  </div>\n</div>\n\n\n\n","import { SharedModule } from './../../shared/shared.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AuthStageComponent } from './auth-stage/auth-stage.component';\nimport { SignInComponent } from './sign-in/sign-in.component';\nimport { SignUpComponent } from './sign-up/sign-up.component';\n\n\n@NgModule({\n  declarations: [AuthStageComponent, SignInComponent, SignUpComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { finalize, first } from 'rxjs/operators';\nimport { configureToastr, toastrTitle } from 'src/app/core/helper';\nimport { AuthenticationService } from 'src/app/core/services/auth.service';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.scss']\n})\nexport class SignInComponent implements OnInit, OnDestroy {\n\n  loginForm: FormGroup;\n  loading = false;\n  returnUrl: string;\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private authenticationService: AuthenticationService,\n              public toastr: ToastrService) {\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/acount']);\n    }\n  }\n\n  ngOnInit() {\n    configureToastr(this.toastr);\n    this.generateForm();\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/';\n  }\n\n  generateForm() {\n    this.loginForm = this.formBuilder.group(\n      {\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', Validators.required]\n      }\n    );\n  }\n\n  clearForm(): void {\n    this.loginForm.reset();\n  }\n\n  get fields() { return this.loginForm.controls; }\n\n  onSubmit() {\n    if (this.loginForm.valid) {\n    this.loading = true;\n    this.authenticationService.login(this.loginForm)\n    .pipe(\n      finalize(() => {\n        this.loading = false;\n      }),\n      first())\n    .subscribe(\n        () => {\n          this.toastr.success(`You are logged in!`, toastrTitle.Success);\n          this.router.navigate(['/']);\n        },\n        () => {\n          this.toastr.error(`Something is wrong`, toastrTitle.Error);\n        });\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group pt-3\">\n      <mat-form-field appearance=\"outline\">\n          <mat-label> {{ 'Email' | translate }} </mat-label>\n          <input matInput formControlName=\"email\"/>\n          <mat-error *ngIf=\"loginForm.get('email').hasError('email')\">\n            {{ 'Invalid-Email-Address' | translate }}\n          </mat-error>\n          <mat-error *ngIf=\"loginForm.get('email').hasError('required')\">\n              {{ 'Email-Is-Required' | translate }}\n          </mat-error>\n      </mat-form-field>\n  </div>\n  <div class=\"form-group pt-3\">\n      <mat-form-field appearance=\"outline\">\n          <mat-label> {{ 'Password' | translate }} </mat-label>\n          <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"on\"/>\n          <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\n              {{ 'Password-Is-Required' | translate }}\n          </mat-error>\n      </mat-form-field>\n  </div>\n  <div class=\"form-group pt-2 pb-2 text-center\">\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"loading\">\n          <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n          {{ 'SignIn' | translate }}\n      </button>\n  </div>\n</form>\n","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, Subject } from 'rxjs';\nimport { map, startWith, takeUntil } from 'rxjs/operators';\nimport { Role } from 'src/app/core/extension/role.enum';\nimport { configureToastr, toastrTitle } from 'src/app/core/helper';\nimport { ISelectInfo } from 'src/app/core/interfaces/select-info.interface';\nimport { IUser } from 'src/app/core/interfaces/user.interface';\nimport { AuthenticationService } from 'src/app/core/services/auth.service';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit, OnDestroy {\n\n\n  @Output() openSignIn = new EventEmitter<any>();\n\n  selectedRole: FormControl = new FormControl(null, Validators.required);\n  signUpForm: FormGroup;\n  doctorForm: FormGroup;\n  patientForm: FormGroup;\n\n  filteredOptions: Observable<ISelectInfo[]>;\n  loading = false;\n  currentUser: IUser;\n  roles = Role;\n  rolesKeys: any;\n  medicalInstitutions: ISelectInfo[] = [];\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private router: Router,\n              private authService: AuthenticationService,\n              private toastr: ToastrService) {\n    this.authService.currentUser.subscribe(x => this.currentUser = x);\n    this.rolesKeys = Object.keys(this.roles);\n  }\n\n  ngOnInit(): void {\n    if (this.currentUser){\n      if (this.currentUser.er_role === Role.Admin) {\n        this.router.navigate(['/admin']);\n      } else {\n        this.router.navigate(['/account']);\n      }\n    }\n    this.createForm();\n    this.getMedicalInstitutions();\n    configureToastr(this.toastr);\n  }\n\n  getMedicalInstitutions(): void {\n    this.authService.getMedicalInstitutions()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        this.medicalInstitutions = res;\n        this.initFilter();\n      });\n  }\n\n  onSubmit(): void {\n    switch (this.selectedRole.value){\n      case Role[Role.Patient]:\n        if (this.signUpForm.valid && this.patientForm.valid) {\n          this.createUserAccount(this.patientForm.value);\n        } else {\n          this.signUpForm.markAllAsTouched();\n          this.patientForm.markAllAsTouched();\n        }\n        return;\n      case Role[Role.Doctor] :\n        if (this.signUpForm.valid && this.doctorForm.valid) {\n          this.createUserAccount({\n            medicalInstitutionId: this.doctorForm.get('medicalInstitutionId').value.id,\n            recordingAvailable: true,\n            firstName: this.doctorForm.get('firstName').value,\n            lastName: this.doctorForm.get('lastName').value,\n            license: this.doctorForm.get('license').value,\n            phone: this.doctorForm.get('phone').value,\n          });\n        } else {\n          this.signUpForm.markAllAsTouched();\n          this.doctorForm.markAllAsTouched();\n        }\n        return;\n    }\n  }\n\n  displayFn(element: ISelectInfo): string {\n    return element?.name;\n  }\n\n  createUserAccount(roleForm: any): void {\n    this.authService.registration(\n      {\n        role: this.selectedRole.value,\n        ...this.signUpForm.value,\n        [this.selectedRole.value]: { ...roleForm }\n      })\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        () => {\n          this.clearForm();\n          this.toastr.success(`Account created`, toastrTitle.Success);\n          this.openSignIn.next(null);\n        },\n        () => {\n          this.toastr.error(`Something is wrong`, toastrTitle.Error);\n        }\n      );\n  }\n\n  createForm(): void  {\n    this.signUpForm = this.formBuilder.group({\n      userName: [null, Validators.required],\n      password: [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n    });\n\n    this.doctorForm = this.formBuilder.group({\n      medicalInstitutionId: [null, Validators.required],\n      firstName: [null, Validators.required],\n      lastName: [null, Validators.required],\n      license: [null, Validators.required],\n      phone: [null, Validators.required],\n    });\n\n    this.patientForm = this.formBuilder.group({\n      firstName: [null, Validators.required],\n      lastName: [null, Validators.required],\n      country: [null, Validators.required],\n      passport: [null, Validators.required],\n      address: [null, Validators.required],\n      phone: [null, Validators.required],\n    });\n  }\n\n  private initFilter() {\n    this.filteredOptions = this.doctorForm.get('medicalInstitutionId').valueChanges\n    .pipe(\n      startWith(null),\n      map(state => state ? this._filterStates(state) : this.medicalInstitutions.slice())\n    );\n  }\n\n  private _filterStates(value): any[] {\n    const filterValue = value && value.name ? value.name.toLowerCase() : value?.toLowerCase();\n\n    return this.medicalInstitutions.filter(element => element.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  clearForm(): void {\n    this.selectedRole.reset();\n    this.doctorForm.reset();\n    this.patientForm.reset();\n    this.signUpForm.reset();\n  }\n\n  formValid(): boolean {\n    switch (this.selectedRole.value){\n      case Role[Role.Patient]:\n        return this.signUpForm.valid && this.patientForm.valid;\n      case Role[Role.Doctor] :\n        return this.signUpForm.valid && this.doctorForm.valid;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n","<mat-vertical-stepper linear #stepper>\n  <mat-step [stepControl]=\"selectedRole\" [editable]=\"false\">\n      <div>\n        <ng-template matStepLabel> {{selectedRole.valid ? selectedRole.value : ('Who-Are-You' | translate)}} </ng-template>\n        <mat-radio-group class=\"radio-group\" [formControl]=\"selectedRole\">\n          <ng-container *ngFor=\"let key of rolesKeys\">\n            <mat-radio-button *ngIf=\"roles[key] != 'Admin'\" class=\"radio-button\" [value]=\"roles[key]\" >\n              {{roles[key]}}\n          </mat-radio-button>\n          </ng-container>\n        </mat-radio-group>\n        <div>\n          <button mat-button matStepperNext> {{ 'Next' | translate }} </button>\n        </div>\n      </div>\n  </mat-step>\n  <mat-step [completed]=\"formValid()\" [editable]=\"true\">\n    <ng-template matStepLabel> {{ formValid() ? ('Completed' | translate) : ('Fill-the-form' | translate)}} </ng-template>\n    <form [formGroup]=\"signUpForm\">\n      <div class=\"form-group pt-3\">\n        <mat-form-field appearance=\"outline\">\n            <mat-label> {{ 'UserName' | translate }} </mat-label>\n            <input matInput formControlName=\"userName\"/>\n            <mat-error *ngIf=\"signUpForm.get('userName').hasError('required')\">\n                {{ 'Name-Is-Required' | translate }}\n            </mat-error>\n        </mat-form-field>\n      </div>\n      <div class=\"form-group pt-3\">\n          <mat-form-field appearance=\"outline\">\n              <mat-label>  {{ 'Email' | translate }} </mat-label>\n              <input matInput formControlName=\"email\"/>\n              <mat-error *ngIf=\"signUpForm.get('email').hasError('email')\">\n                {{ 'Invalid-Email-Address' | translate }}\n              </mat-error>\n              <mat-error *ngIf=\"signUpForm.get('email').hasError('required')\">\n                {{ 'Email-Is-Required' | translate }}\n              </mat-error>\n          </mat-form-field>\n      </div>\n      <div class=\"form-group pt-3\">\n          <mat-form-field appearance=\"outline\">\n              <mat-label> {{ 'Password' | translate }} </mat-label>\n              <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"on\"/>\n              <mat-error *ngIf=\"signUpForm.get('password').hasError('required')\">\n                  {{ 'Password-Is-Required' | translate }}\n              </mat-error>\n          </mat-form-field>\n      </div>\n    </form>\n    <ng-container *ngIf=\"roles[roles.Patient] == selectedRole.value\">\n      <form [formGroup]=\"patientForm\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'First-Name' | translate }} </mat-label>\n                  <input matInput formControlName=\"firstName\"/>\n                  <mat-error *ngIf=\"patientForm.get('firstName').hasError('required')\">\n                    {{ 'First-Name-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'Last-Name' | translate }}</mat-label>\n                  <input matInput formControlName=\"lastName\"/>\n                  <mat-error *ngIf=\"patientForm.get('lastName').hasError('required')\">\n                    {{ 'Last-Name-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'Country' | translate }}  </mat-label>\n                  <input matInput formControlName=\"country\"/>\n                  <mat-error *ngIf=\"patientForm.get('country').hasError('required')\">\n                    {{ 'Country-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label>  {{ 'Address' | translate }} </mat-label>\n                  <input matInput formControlName=\"address\"/>\n                  <mat-error *ngIf=\"patientForm.get('address').hasError('required')\">\n                    {{ 'Address-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n              <div class=\"form-group pt-3\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>   {{ 'Passport' | translate }} </mat-label>\n                    <input matInput formControlName=\"passport\"/>\n                    <mat-error *ngIf=\"patientForm.get('passport').hasError('required')\">\n                      {{ 'Passport-Is-Required' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label>  {{ 'Phone' | translate }}</mat-label>\n                  <input matInput formControlName=\"phone\"/>\n                  <mat-error *ngIf=\"patientForm.get('phone').hasError('required')\">\n                     {{ 'Phone-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n      </form>\n    </ng-container>\n    <ng-container *ngIf=\"roles[roles.Doctor] == selectedRole.value\">\n      <form [formGroup]=\"doctorForm\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label>{{ 'First-Name' | translate }} </mat-label>\n                  <input matInput formControlName=\"firstName\"/>\n                  <mat-error *ngIf=\"doctorForm.get('firstName').hasError('required')\">\n                    {{ 'First-Name-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'Last-Name' | translate }} </mat-label>\n                  <input matInput formControlName=\"lastName\"/>\n                  <mat-error *ngIf=\"doctorForm.get('lastName').hasError('required')\">\n                    {{ 'Last-Name-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'License' | translate }}</mat-label>\n                  <input matInput formControlName=\"license\"/>\n                  <mat-error *ngIf=\"doctorForm.get('license').hasError('required')\">\n                    {{ 'License-is-required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label> {{ 'Phone' | translate }} </mat-label>\n                <input matInput formControlName=\"phone\"/>\n                <mat-error *ngIf=\"doctorForm.get('phone').hasError('required')\">\n                   {{ 'Phone-Is-Required' | translate }}\n                </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group pt-3\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>{{ 'MedicalInstitutions' | translate }}</mat-label>\n            <input placeholder=\"Search...\"\n                  matInput\n                  type=\"text\"\n                  formControlName=\"medicalInstitutionId\"\n                  [matAutocomplete]=\"auto\">\n            <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n              <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n                {{option.name}}\n              </mat-option>\n            </mat-autocomplete>\n            <mat-error *ngIf=\"doctorForm.get('medicalInstitutionId').hasError('required')\"> {{ 'Medical-Institution-is-required' | translate }} </mat-error>\n          </mat-form-field>\n        </div>\n      </form>\n    </ng-container>\n    <div>\n      <button mat-button (click)=\"stepper.reset(); clearForm()\">{{ 'Reset' | translate }}</button>\n      <button mat-button matStepperNext>{{ 'Next' | translate }}</button>\n    </div>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>{{ 'Complete' | translate }}</ng-template>\n      <button mat-button matStepperPrevious>{{ 'Back' | translate }}</button>\n      <button mat-button matStepperPrevious color=\"primary\" (click)=\"onSubmit()\">{{ 'SignUp' | translate }}</button>\n      <button mat-button (click)=\"stepper.reset(); clearForm()\">{{ 'Reset' | translate }}</button>\n  </mat-step>\n</mat-vertical-stepper>\n"]}