{"version":3,"sources":["webpack:///src/app/core/extension/domService.service.ts","webpack:///src/app/features/admin/admin-routing.module.ts","webpack:///src/app/features/admin/admin.module.ts","webpack:///src/app/features/admin/api/admin.service.ts","webpack:///src/app/features/admin/medical-instituation/medical-instituation.component.ts","webpack:///src/app/features/admin/medical-instituation/medical-instituation.component.html","webpack:///src/app/features/admin/user-list/user-list.component.ts","webpack:///src/app/features/admin/user-list/user-list.component.html"],"names":["DomService","componentFactoryResolver","appRef","injector","el","rect","getBoundingClientRect","left","window","scrollX","top","scrollY","width","right","height","bottom","fileName","fileContent","contentType","downloadLink","document","createElement","body","appendChild","navigator","msSaveOrOpenBlob","blob","Blob","type","href","download","click","removeChild","providedIn","routes","path","redirectTo","pathMatch","component","AdminRoutingModule","forChild","imports","exports","AdminModule","declarations","AdminService","http","get","apiUrl","id","form","post","patientId","status","recordId","put","receiptId","responseType","MedicalInstituationComponent","formBuilder","adminService","domService","toastr","medicalInstituationControl","updateState","medicalInstituations","destroy$","createForm","getmedicalInstituations","getAllMedicalInstitutions","pipe","subscribe","res","initmedicalInstituationFilter","medicalInstituationForm","group","name","required","country","city","address","formDirective","resetForm","reset","setValue","valid","update","create","markAllAsTouched","next","complete","createMedicalInstituation","value","clearForm","updateMedicalInstituatio","category","medicalInstituationOptions","valueChanges","state","_filtermedicalInstituation","slice","filterValue","toLowerCase","filter","element","includes","exportDataAsExcel","collis","downloadFile","Date","toLocaleDateString","onSubmit","selector","templateUrl","styleUrls","UserListComponent","translateService","accountService","userdeleted","displayedColumns","dataSource","getUserList","userId","deleteUser","success","instant","error","getAllUsers","userInfo","patient","doctor","firstName","lastName"],"mappings":"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","file":"features-admin-admin-module-es5.js","sourcesContent":["import {\r\n  Injectable,\r\n  Injector,\r\n  ComponentFactoryResolver,\r\n  ApplicationRef\r\n} from '@angular/core';\r\n\r\nexport interface Offset {\r\n  left: number;\r\n  top: number;\r\n  width: number;\r\n  height: number;\r\n  bottom: number;\r\n  right: number;\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class DomService {\r\n\r\n  constructor(\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private appRef: ApplicationRef,\r\n    private injector: Injector\r\n  ) { }\r\n\r\n  public getOffset(el: HTMLElement): Offset {\r\n    let rect = el.getBoundingClientRect();\r\n    return {\r\n      left: rect.left + window.scrollX,\r\n      top: rect.top + window.scrollY,\r\n      width: rect.right - rect.left,\r\n      height: rect.bottom - rect.top,\r\n      bottom: (rect.top + window.scrollY) + (rect.bottom - rect.top),\r\n      right: (rect.left + window.scrollX) + (rect.right - rect.left)\r\n    }\r\n  }\r\n\r\n  public downloadFile(fileName: string, fileContent: string, contentType: string) {\r\n\r\n    let downloadLink = document.createElement(\"a\");\r\n\r\n    document.body.appendChild(downloadLink);\r\n\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      var blob = new Blob(['\\ufeff', fileContent], {\r\n        type: contentType\r\n      });\r\n      navigator.msSaveOrOpenBlob(blob, fileName);\r\n    } else {\r\n      downloadLink.href = 'data:' + contentType + ',' + fileContent;\r\n      downloadLink.download = fileName;\r\n      downloadLink.click();\r\n    }\r\n    document.body.removeChild(downloadLink);\r\n  }\r\n}\r\n\r\n\r\n\r\n","import { UserListComponent } from './user-list/user-list.component';\nimport { MedicalInstituationComponent } from './medical-instituation/medical-instituation.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'med-inst' , pathMatch: 'prefix'},\n  { path: 'med-inst', component: MedicalInstituationComponent},\n  { path: 'users', component: UserListComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n","import { SharedModule } from 'src/app/shared/shared.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { MedicalInstituationComponent } from './medical-instituation/medical-instituation.component';\nimport { UserListComponent } from './user-list/user-list.component';\n\n\n@NgModule({\n  declarations: [MedicalInstituationComponent, UserListComponent],\n  imports: [\n    CommonModule,\n    AdminRoutingModule,\n    SharedModule\n  ]\n})\nexport class AdminModule { }\n","import { ISelectInfo } from './../../../shared/components/controls-test/controls-test.component';\nimport { IPatient } from '../../../core/interfaces/patient.interface';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IRecord } from 'src/app/core/interfaces/record.interface';\nimport { environment } from 'src/environments/environment';\nimport { IDiseaseHistory } from 'src/app/core/interfaces/disease-history.interface';\nimport { IMedicalInstitution } from 'src/app/core/interfaces/medical-Institution.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  constructor(private http: HttpClient) {}\n\n  getMedicalInstitutions(): Observable<ISelectInfo[]> {\n    return this.http.get<ISelectInfo[]>(environment.apiUrl +  'MedicalInstituation/autocomplete');\n  }\n\n  getDoctorByMedicalInstitution(id: number): Observable<ISelectInfo[]> {\n    return this.http.get<ISelectInfo[]>(environment.apiUrl +  'Doctor/doctors-by-instituation-autocomplete/' + id);\n  }\n\n  createRecord(form): Observable<any> {\n    return this.http.post(environment.apiUrl +  'Record', form);\n  }\n\n  getPatientRecords(): Observable<IRecord[]> {\n    return this.http.get<IRecord[]>(environment.apiUrl +  'Record/patient-records');\n  }\n\n  getRecordById(id: number): Observable<IRecord> {\n    return this.http.get<IRecord>(environment.apiUrl +  'Record/get-record-by-id/' + id);\n  }\n\n  getPatientRecordsById(patientId: number): Observable<IRecord[]> {\n    return this.http.get<IRecord[]>(environment.apiUrl +  'Record/patient-records-by-id/' + patientId);\n  }\n\n  getDoctorRecords(): Observable<IRecord[]> {\n    return this.http.get<IRecord[]>(environment.apiUrl +  'Record/doctor-records');\n  }\n\n  cancelRecordLikePatient(status: any, recordId: number): Observable<any> {\n    return this.http.put(environment.apiUrl +  'Record/update-status-like-patient?status=' + status + '&recordId=' + recordId, {});\n  }\n\n  updateRecord(form): Observable<any> {\n    return this.http.put(environment.apiUrl +  'Record/update-record', form);\n  }\n\n  updateRecordLikeDoctor(status: any, recordId: number): Observable<any> {\n    return this.http.put(environment.apiUrl +  'Record/update-status-like-doctor?status=' + status + '&recordId=' + recordId, {});\n  }\n\n  getPatientInfo(patientId: number): Observable<IPatient> {\n    return this.http.get<IPatient>(environment.apiUrl +  'Patient/get-by-id/' + patientId);\n  }\n\n  getDiseaseHistoryInfo(patientId: number): Observable<IDiseaseHistory> {\n    return this.http.get<IDiseaseHistory>(environment.apiUrl +  'DiseaseHistory/disease-history-by-patient-id/' + patientId);\n  }\n\n  updateDiseaseHistory(form: IDiseaseHistory): Observable<any> {\n    return this.http.put(environment.apiUrl +  'DiseaseHistory', form);\n  }\n\n  createDiseaseHistory(form: IDiseaseHistory): Observable<any> {\n    return this.http.post(environment.apiUrl +  'DiseaseHistory', form);\n  }\n\n  getMedicamentCategories(): Observable<any[]> {\n    return this.http.get<any[]>(environment.apiUrl +  'MedicamentCategory');\n  }\n\n  updateReceiptStatus(receiptId: number, status: any): Observable<any> {\n    return this.http.put(environment.apiUrl +  'Receipt/update-receipt-status?status=' + status + '&id=' + receiptId, {});\n  }\n\n  getManufacturers(): Observable<ISelectInfo[]> {\n    return this.http.get<ISelectInfo[]>(environment.apiUrl +  'Manufacturer/autocomplete');\n  }\n\n  createManufacture(form: any): Observable<any> {\n    return this.http.post(environment.apiUrl +  'Medicament', form);\n  }\n\n  updateManufacture(form: any): Observable<any> {\n    return this.http.put(environment.apiUrl +  'Medicament', form);\n  }\n\n  createMedicamentCategory(form): Observable<any> {\n    return this.http.post(environment.apiUrl +  'MedicamentCategory', form);\n  }\n\n  updateMedicamentCategory(form): Observable<any> {\n    return this.http.put(environment.apiUrl +  'MedicamentCategory', form);\n  }\n\n  createManufacturer(form): Observable<any> {\n    return this.http.post(environment.apiUrl +  'Manufacturer', form);\n  }\n\n  updateManufacturer(form): Observable<any> {\n    return this.http.put(environment.apiUrl +  'Manufacturer', form);\n  }\n\n  createMedicalInstituation(form): Observable<any> {\n    return this.http.post(environment.apiUrl +  'MedicalInstituation', form);\n  }\n\n  getAllMedicalInstitutions(): Observable<IMedicalInstitution[]> {\n    return this.http.get<IMedicalInstitution[]>(environment.apiUrl +  'MedicalInstituation');\n  }\n\n\n  updateMedicalInstituatio(form): Observable<any> {\n    return this.http.put(environment.apiUrl +  'MedicalInstituation', form);\n  }\n\n  exportDataAsExcel(): Observable<any> {\n    return this.http.get(environment.apiUrl + 'Account/export-data', { responseType: 'text' });\n  }\n\n}\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { FormGroupDirective, FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil, startWith, map } from 'rxjs/operators';\nimport { DomService } from 'src/app/core/extension/domService.service';\nimport { IMedicalInstitution } from 'src/app/core/interfaces/medical-Institution.interface';\nimport { AdminService } from '../api/admin.service';\n\n@Component({\n  selector: 'app-medical-instituation',\n  templateUrl: './medical-instituation.component.html',\n  styleUrls: ['./medical-instituation.component.scss']\n})\nexport class MedicalInstituationComponent implements OnInit, OnDestroy {\n\n\n  @ViewChild(FormGroupDirective) formDirective: FormGroupDirective;\n\n  medicalInstituationForm: FormGroup;\n  medicalInstituationControl: FormControl = new FormControl(null);\n\n  updateState = false;\n  medicalInstituations: IMedicalInstitution[] = [];\n  medicalInstituationOptions: Observable<IMedicalInstitution[]>;\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private adminService: AdminService,\n              private domService: DomService,\n              private toastr: ToastrService) {\n    }\n\n  ngOnInit(): void {\n    this.createForm();\n    this.getmedicalInstituations();\n  }\n\n  getmedicalInstituations(): void {\n    this.adminService.getAllMedicalInstitutions()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        this.medicalInstituations = res;\n        this.initmedicalInstituationFilter();\n      });\n  }\n\n  createForm(): void {\n    this.medicalInstituationForm = this.formBuilder.group({\n      id: 0,\n      name: [null, Validators.required],\n      country: [null, Validators.required],\n      city: [null, Validators.required],\n      address: [null, Validators.required],\n    });\n  }\n\n  clearForm(): void {\n    this.updateState = false;\n    this.formDirective.resetForm();\n    this.medicalInstituationControl.reset();\n    this.medicalInstituationForm.reset();\n    this.medicalInstituationForm.get('id').setValue(0);\n  }\n\n  onSubmit(): void {\n    if (this.medicalInstituationForm.valid) {\n      this.updateState ? this.update() : this.create();\n    } else {\n      this.medicalInstituationForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  create(): void {\n    this.adminService.createMedicalInstituation(this.medicalInstituationForm.value)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        this.clearForm();\n        this.getmedicalInstituations();\n      });\n  }\n\n  update(): void {\n    this.adminService.updateMedicalInstituatio(this.medicalInstituationForm.value)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        this.clearForm();\n        this.getmedicalInstituations();\n      });\n  }\n\n  fillFormFoUpdate(category: IMedicalInstitution): void {\n    this.clearForm();\n    this.updateState = true;\n    this.medicalInstituationForm.get('id').setValue(category.id);\n    this.medicalInstituationForm.get('name').setValue(category.name);\n    this.medicalInstituationForm.get('country').setValue(category.country);\n    this.medicalInstituationForm.get('city').setValue(category.city);\n    this.medicalInstituationForm.get('address').setValue(category.address);\n  }\n\n  private initmedicalInstituationFilter() {\n    this.medicalInstituationOptions = this.medicalInstituationControl.valueChanges\n    .pipe(\n      startWith(null),\n      map(state => state ? this._filtermedicalInstituation(state) : this.medicalInstituations.slice())\n    );\n  }\n\n\n  private _filtermedicalInstituation(value): any[] {\n    const filterValue = value && value.name ? value.name.toLowerCase() : value?.toLowerCase();\n\n    return this.medicalInstituations.filter(element => element.name.toLowerCase().includes(filterValue));\n  }\n\n\n  exportDataAsExcel(): void {\n    this.adminService.exportDataAsExcel()\n    .subscribe((collis: any) => {\n      if (collis) {\n        this.domService.downloadFile(`excel data ${new Date().toLocaleDateString()}.xlsx`, collis, 'application/xlsx;base64');\n      }\n    });\n  }\n}\n","<button mat-button (click)=\"exportDataAsExcel()\" type=\"button\">{{\"ExportDATA\" | translate}}</button>\n<div class=\"row\" style=\"margin-right: 0px;\">\n  <div class=\"col-md-5\">\n    <form class=\"mt-5 p-2\" [formGroup]=\"medicalInstituationForm\">\n      <h1>{{ 'Create-Medical-Instituation' | translate }}</h1>\n      <div class=\"form-group pt-3\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>{{ 'Name' | translate }}   </mat-label>\n          <input placeholder=\"Type...\" matInput type=\"text\" formControlName=\"name\">\n          <mat-error *ngIf=\"medicalInstituationForm.get('name').hasError('required')\">\n            {{ 'Name-Is-Required' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div class=\"form-group pt-3\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>  {{ 'Country' | translate }} </mat-label>\n          <input placeholder=\"Type...\" matInput type=\"text\" formControlName=\"country\">\n          <mat-error *ngIf=\"medicalInstituationForm.get('country').hasError('required')\">\n            {{ 'Country-Is-Required' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div class=\"form-group pt-3\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>  {{ 'City' | translate }}</mat-label>\n          <input placeholder=\"Type...\" matInput type=\"text\" formControlName=\"city\">\n          <mat-error *ngIf=\"medicalInstituationForm.get('city').hasError('required')\">\n            {{ 'City-Is-Required' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div class=\"form-group pt-3\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label> {{ 'Address' | translate }} </mat-label>\n          <input placeholder=\"Type...\" matInput type=\"text\" formControlName=\"address\">\n          <mat-error *ngIf=\"medicalInstituationForm.get('address').hasError('required')\">\n              {{ 'Address-Is-Required' | translate }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div class=\"form-group pt-3 text-center\">\n          <button mat-flat-button color=\"primary\" (click)=\"onSubmit()\" > {{ updateState ? ('Update' | translate) : ('Create' | translate)}}</button>\n          <button mat-button color=\"warn\" type=\"button\" (click)=\"clearForm()\">\n            {{ 'Clear' | translate }}\n          </button>\n      </div>\n    </form>\n  </div>\n  <div class=\"col-md-7\">\n    <div class=\"mt-5 ml-5 p-2\">\n      <h1>  {{ 'Medical-Instituations' | translate }}</h1>\n      <div class=\"form-group pt-3 align-self-center\" *ngIf=\"medicalInstituations && medicalInstituations.length > 0\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label> {{ 'Search-Medical-Instituations' | translate }}</mat-label>\n          <input placeholder=\"Search...\" matInput type=\"text\" [formControl]=\"medicalInstituationControl\">\n        </mat-form-field>\n      </div>\n        <ul style=\"list-style: none; max-height: 300px; overflow-y: auto;\">\n          <ng-container *ngFor=\"let option of medicalInstituationOptions| async\">\n            <li class=\"p-3\">\n              <mat-card class=\"w-100\">\n                <strong>{{ 'Medical-Instituation-Name' | translate }}: </strong> {{option.name}}\n                <br>\n                <strong>{{ 'Country' | translate }}:</strong>  {{option.country}}\n                <br>\n                <strong>{{ 'City' | translate }}:</strong>  {{option.city}}\n                <br>\n                <strong>{{ 'Address' | translate }}:</strong>  {{option.address}}\n                <br>\n                <mat-card-actions>\n                  <button class=\"text-right\" mat-button color=\"primary\" (click)=\"fillFormFoUpdate(option)\">\n                    {{ 'Update' | translate }}\n                  </button>\n                </mat-card-actions>\n              </mat-card>\n            </li>\n          </ng-container>\n        </ul>\n    </div>\n  </div>\n</div>\n","import { IFullUserInfo } from 'src/app/core/interfaces/user.interface';\nimport { AccountService } from './../../account/api/account.service.';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { finalize, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.scss']\n})\nexport class UserListComponent implements OnInit, OnDestroy {\n  userdeleted = false;\n  displayedColumns: string[] = ['position', 'email', 'userName', 'fullName', 'role', 'action'];\n  dataSource: IFullUserInfo[] = [];\n\n  private destroy$ = new Subject<void>();\n  constructor(public  translateService: TranslateService,\n              private accountService: AccountService,\n              public toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.getUserList();\n  }\n\n  deleteUser(userId: string) {\n    this.userdeleted = true;\n    this.accountService.deleteUser(userId)\n      .pipe(\n        finalize(() => {\n          this.userdeleted = false;\n          this.getUserList();\n        }),\n        takeUntil(this.destroy$))\n      .subscribe(\n        () => {\n          this.toastr.success(this.translateService.instant('User-Deleted'), this.translateService.instant('Success'));\n        },\n        () => {\n          this.toastr.error(this.translateService.instant('Something-Is-Wrong'), this.translateService.instant('Error'));\n        }\n      );\n  }\n\n  getUserList() {\n    this.accountService.getAllUsers()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        res => {\n          this.dataSource = res;\n        },\n        () => {\n          this.toastr.error(this.translateService.instant('Something-Is-Wrong'), this.translateService.instant('Error'));\n        }\n      );\n  }\n\n  openUser(userId: number): void {\n\n  }\n\n  getRoleName(userInfo: IFullUserInfo): string {\n    if (!userInfo.patient && !userInfo.doctor) {\n      return 'Admin';\n    }\n\n    if (userInfo.patient) {\n      return 'Patient';\n    }\n\n    return 'Doctor';\n  }\n\n  getFullName(userInfo: IFullUserInfo): string {\n    if (!userInfo.patient && !userInfo.doctor) {\n      return '';\n    }\n\n    return userInfo.patient\n      ? userInfo.patient.firstName + ' ' + userInfo.patient.lastName\n      : userInfo.doctor.firstName + ' ' + userInfo.doctor.lastName;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n}\n","<div class=\"pt-5\" *ngIf=\"dataSource\">\n  <h1> {{ 'Users' | translate }} </h1>\n  <br/>\n  <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8 w-100\">\n    <ng-container matColumnDef=\"position\">\n      <th mat-header-cell *matHeaderCellDef> No. </th>\n      <td mat-cell *matCellDef=\"let element\"> {{dataSource.indexOf(element) + 1 }} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"email\">\n      <th mat-header-cell *matHeaderCellDef>  {{ 'Email' | translate }} </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"userName\">\n      <th mat-header-cell *matHeaderCellDef>  {{ 'UserName' | translate }}</th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.userName}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"fullName\">\n      <th mat-header-cell *matHeaderCellDef>  {{ 'FullName' | translate }}</th>\n      <td mat-cell *matCellDef=\"let element\"> {{getFullName(element)}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"role\">\n      <th mat-header-cell *matHeaderCellDef>  {{ 'Role' | translate }}</th>\n      <td mat-cell *matCellDef=\"let element\"> {{ getRoleName(element)}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"action\">\n      <th mat-header-cell *matHeaderCellDef>  {{ 'Delete' | translate }}</th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"warn\" (click)=\"deleteUser(element.id)\"  [disabled]='userdeleted'>\n          <mat-icon>delete_outline</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n<div class=\"container pt-5\" *ngIf=\"dataSource==null\">\n<div class=\"d-flex justify-content-center\">\n  <mat-progress-spinner\n      color=\"primary\"\n      mode=\"indeterminate\"\n      [diameter]=\"100\"\n      value=\"70\">\n  </mat-progress-spinner>\n</div>\n</div>\n"]}