{"version":3,"sources":["./src/app/features/auth/auth-routing.module.ts","./src/app/features/auth/auth-stage/auth-stage.component.ts","./src/app/features/auth/auth-stage/auth-stage.component.html","./src/app/features/auth/auth.module.ts","./src/app/features/auth/sign-in/sign-in.component.ts","./src/app/features/auth/sign-in/sign-in.component.html","./src/app/features/auth/sign-up/sign-up.component.ts","./src/app/features/auth/sign-up/sign-up.component.html"],"names":[],"mappings":"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","file":"features-auth-auth-module-es2015.js","sourcesContent":["import { AuthStageComponent } from './auth-stage/auth-stage.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  { path: '', component: AuthStageComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTabGroup } from '@angular/material/tabs';\nimport { SignInComponent } from '../sign-in/sign-in.component';\nimport { SignUpComponent } from '../sign-up/sign-up.component';\n\n@Component({\n  selector: 'app-auth-stage',\n  templateUrl: './auth-stage.component.html',\n  styleUrls: ['./auth-stage.component.scss']\n})\nexport class AuthStageComponent implements OnInit {\n\n  @ViewChild(SignInComponent) signIn: SignInComponent;\n  @ViewChild(SignUpComponent) signUp: SignUpComponent;\n  @ViewChild('tabs') tabGroup: MatTabGroup;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onTabChanged(): void {\n    this.signIn.clearForm();\n    this.signUp.clearForm();\n  }\n\n  openSignIn(event: any): void {\n    this.tabGroup.selectedIndex = 2;\n  }\n}\n","\n<div class=\"background\">\n  <div class=\"d-flex justify-content-center\" style=\"overflow: hidden;\">\n    <mat-card style=\"overflow: hidden;\" class=\"mt-5\">\n      <mat-tab-group  #tabs style=\"overflow: hidden;\" mat-stretch-tabs (selectedTabChange)=\"onTabChanged()\">\n        <mat-tab label=\"Sign Up\">\n          <app-sign-up style=\"overflow: hidden;\" (openSignIn)=\"openSignIn($event)\"></app-sign-up>\n        </mat-tab>\n        <mat-tab label=\"Sign In\">\n          <app-sign-in></app-sign-in>\n        </mat-tab>\n      </mat-tab-group>\n    </mat-card>\n  </div>\n</div>\n\n\n\n","import { SharedModule } from './../../shared/shared.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AuthStageComponent } from './auth-stage/auth-stage.component';\nimport { SignInComponent } from './sign-in/sign-in.component';\nimport { SignUpComponent } from './sign-up/sign-up.component';\n\n\n@NgModule({\n  declarations: [AuthStageComponent, SignInComponent, SignUpComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { finalize, first } from 'rxjs/operators';\nimport { configureToastr, toastrTitle } from 'src/app/core/helper';\nimport { AuthenticationService } from 'src/app/core/services/auth.service';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.scss']\n})\nexport class SignInComponent implements OnInit, OnDestroy {\n\n  loginForm: FormGroup;\n  loading = false;\n  returnUrl: string;\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private route: ActivatedRoute,\n              private router: Router,\n              private authenticationService: AuthenticationService,\n              public toastr: ToastrService) {\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/acount']);\n    }\n  }\n\n  ngOnInit() {\n    configureToastr(this.toastr);\n    this.generateForm();\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/';\n  }\n\n  generateForm() {\n    this.loginForm = this.formBuilder.group(\n      {\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', Validators.required]\n      }\n    );\n  }\n\n  clearForm(): void {\n    this.loginForm.reset();\n  }\n\n  get fields() { return this.loginForm.controls; }\n\n  onSubmit() {\n    if (this.loginForm.valid) {\n    this.loading = true;\n    this.authenticationService.login(this.loginForm)\n    .pipe(\n      finalize(() => {\n        this.loading = false;\n      }),\n      first())\n    .subscribe(\n        () => {\n          this.toastr.success(`You are logged in!`, toastrTitle.Success);\n          this.router.navigate(['/']);\n        },\n        () => {\n          this.toastr.error(`Something is wrong`, toastrTitle.Error);\n        });\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group pt-3\">\n      <mat-form-field appearance=\"outline\">\n          <mat-label> {{ 'Email' | translate }} </mat-label>\n          <input matInput formControlName=\"email\"/>\n          <mat-error *ngIf=\"loginForm.get('email').hasError('email')\">\n            {{ 'Invalid-Email-Address' | translate }}\n          </mat-error>\n          <mat-error *ngIf=\"loginForm.get('email').hasError('required')\">\n              {{ 'Email-Is-Required' | translate }}\n          </mat-error>\n      </mat-form-field>\n  </div>\n  <div class=\"form-group pt-3\">\n      <mat-form-field appearance=\"outline\">\n          <mat-label> {{ 'Password' | translate }} </mat-label>\n          <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"on\"/>\n          <mat-error *ngIf=\"loginForm.get('password').hasError('required')\">\n              {{ 'Password-Is-Required' | translate }}\n          </mat-error>\n      </mat-form-field>\n  </div>\n  <div class=\"form-group pt-2 pb-2 text-center\">\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"loading\">\n          <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n          {{ 'SignIn' | translate }}\n      </button>\n  </div>\n</form>\n","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, Subject } from 'rxjs';\nimport { map, startWith, takeUntil } from 'rxjs/operators';\nimport { Role } from 'src/app/core/extension/role.enum';\nimport { configureToastr, toastrTitle } from 'src/app/core/helper';\nimport { ISelectInfo } from 'src/app/core/interfaces/select-info.interface';\nimport { IUser } from 'src/app/core/interfaces/user.interface';\nimport { AuthenticationService } from 'src/app/core/services/auth.service';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit, OnDestroy {\n\n\n  @Output() openSignIn = new EventEmitter<any>();\n\n  selectedRole: FormControl = new FormControl(null, Validators.required);\n  signUpForm: FormGroup;\n  doctorForm: FormGroup;\n  patientForm: FormGroup;\n\n  filteredOptions: Observable<ISelectInfo[]>;\n  loading = false;\n  currentUser: IUser;\n  roles = Role;\n  rolesKeys: any;\n  medicalInstitutions: ISelectInfo[] = [];\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private router: Router,\n              private authService: AuthenticationService,\n              private toastr: ToastrService) {\n    this.authService.currentUser.subscribe(x => this.currentUser = x);\n    this.rolesKeys = Object.keys(this.roles);\n  }\n\n  ngOnInit(): void {\n    if (this.currentUser){\n      if (this.currentUser.er_role === Role.Admin) {\n        this.router.navigate(['/admin']);\n      } else {\n        this.router.navigate(['/account']);\n      }\n    }\n    this.createForm();\n    this.getMedicalInstitutions();\n    configureToastr(this.toastr);\n  }\n\n  getMedicalInstitutions(): void {\n    this.authService.getMedicalInstitutions()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        this.medicalInstitutions = res;\n        this.initFilter();\n      });\n  }\n\n  onSubmit(): void {\n    switch (this.selectedRole.value){\n      case Role[Role.Patient]:\n        if (this.signUpForm.valid && this.patientForm.valid) {\n          this.createUserAccount(this.patientForm.value);\n        } else {\n          this.signUpForm.markAllAsTouched();\n          this.patientForm.markAllAsTouched();\n        }\n        return;\n      case Role[Role.Doctor] :\n        if (this.signUpForm.valid && this.doctorForm.valid) {\n          this.createUserAccount({\n            medicalInstitutionId: this.doctorForm.get('medicalInstitutionId').value.id,\n            recordingAvailable: true,\n            firstName: this.doctorForm.get('firstName').value,\n            lastName: this.doctorForm.get('lastName').value,\n            license: this.doctorForm.get('license').value,\n            phone: this.doctorForm.get('phone').value,\n          });\n        } else {\n          this.signUpForm.markAllAsTouched();\n          this.doctorForm.markAllAsTouched();\n        }\n        return;\n    }\n  }\n\n  displayFn(element: ISelectInfo): string {\n    return element?.name;\n  }\n\n  createUserAccount(roleForm: any): void {\n    this.authService.registration(\n      {\n        role: this.selectedRole.value,\n        ...this.signUpForm.value,\n        [this.selectedRole.value]: { ...roleForm }\n      })\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        () => {\n          this.clearForm();\n          this.toastr.success(`Account created`, toastrTitle.Success);\n          this.openSignIn.next(null);\n        },\n        () => {\n          this.toastr.error(`Something is wrong`, toastrTitle.Error);\n        }\n      );\n  }\n\n  createForm(): void  {\n    this.signUpForm = this.formBuilder.group({\n      userName: [null, Validators.required],\n      password: [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n    });\n\n    this.doctorForm = this.formBuilder.group({\n      medicalInstitutionId: [null, Validators.required],\n      firstName: [null, Validators.required],\n      lastName: [null, Validators.required],\n      license: [null, Validators.required],\n      phone: [null, Validators.required],\n    });\n\n    this.patientForm = this.formBuilder.group({\n      firstName: [null, Validators.required],\n      lastName: [null, Validators.required],\n      country: [null, Validators.required],\n      passport: [null, Validators.required],\n      address: [null, Validators.required],\n      phone: [null, Validators.required],\n    });\n  }\n\n  private initFilter() {\n    this.filteredOptions = this.doctorForm.get('medicalInstitutionId').valueChanges\n    .pipe(\n      startWith(null),\n      map(state => state ? this._filterStates(state) : this.medicalInstitutions.slice())\n    );\n  }\n\n  private _filterStates(value): any[] {\n    const filterValue = value && value.name ? value.name.toLowerCase() : value?.toLowerCase();\n\n    return this.medicalInstitutions.filter(element => element.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  clearForm(): void {\n    this.selectedRole.reset();\n    this.doctorForm.reset();\n    this.patientForm.reset();\n    this.signUpForm.reset();\n  }\n\n  formValid(): boolean {\n    switch (this.selectedRole.value){\n      case Role[Role.Patient]:\n        return this.signUpForm.valid && this.patientForm.valid;\n      case Role[Role.Doctor] :\n        return this.signUpForm.valid && this.doctorForm.valid;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n\n","<mat-vertical-stepper linear #stepper>\n  <mat-step [stepControl]=\"selectedRole\" [editable]=\"false\">\n      <div>\n        <ng-template matStepLabel> {{selectedRole.valid ? selectedRole.value : ('Who-Are-You' | translate)}} </ng-template>\n        <mat-radio-group class=\"radio-group\" [formControl]=\"selectedRole\">\n          <ng-container *ngFor=\"let key of rolesKeys\">\n            <mat-radio-button *ngIf=\"roles[key] != 'Admin'\" class=\"radio-button\" [value]=\"roles[key]\" >\n              {{roles[key]}}\n          </mat-radio-button>\n          </ng-container>\n        </mat-radio-group>\n        <div>\n          <button mat-button matStepperNext> {{ 'Next' | translate }} </button>\n        </div>\n      </div>\n  </mat-step>\n  <mat-step [completed]=\"formValid()\" [editable]=\"true\">\n    <ng-template matStepLabel> {{ formValid() ? ('Completed' | translate) : ('Fill-the-form' | translate)}} </ng-template>\n    <form [formGroup]=\"signUpForm\">\n      <div class=\"form-group pt-3\">\n        <mat-form-field appearance=\"outline\">\n            <mat-label> {{ 'UserName' | translate }} </mat-label>\n            <input matInput formControlName=\"userName\"/>\n            <mat-error *ngIf=\"signUpForm.get('userName').hasError('required')\">\n                {{ 'Name-Is-Required' | translate }}\n            </mat-error>\n        </mat-form-field>\n      </div>\n      <div class=\"form-group pt-3\">\n          <mat-form-field appearance=\"outline\">\n              <mat-label>  {{ 'Email' | translate }} </mat-label>\n              <input matInput formControlName=\"email\"/>\n              <mat-error *ngIf=\"signUpForm.get('email').hasError('email')\">\n                {{ 'Invalid-Email-Address' | translate }}\n              </mat-error>\n              <mat-error *ngIf=\"signUpForm.get('email').hasError('required')\">\n                {{ 'Email-Is-Required' | translate }}\n              </mat-error>\n          </mat-form-field>\n      </div>\n      <div class=\"form-group pt-3\">\n          <mat-form-field appearance=\"outline\">\n              <mat-label> {{ 'Password' | translate }} </mat-label>\n              <input matInput type=\"password\" formControlName=\"password\" autocomplete=\"on\"/>\n              <mat-error *ngIf=\"signUpForm.get('password').hasError('required')\">\n                  {{ 'Password-Is-Required' | translate }}\n              </mat-error>\n          </mat-form-field>\n      </div>\n    </form>\n    <ng-container *ngIf=\"roles[roles.Patient] == selectedRole.value\">\n      <form [formGroup]=\"patientForm\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'First-Name' | translate }} </mat-label>\n                  <input matInput formControlName=\"firstName\"/>\n                  <mat-error *ngIf=\"patientForm.get('firstName').hasError('required')\">\n                    {{ 'First-Name-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'Last-Name' | translate }}</mat-label>\n                  <input matInput formControlName=\"lastName\"/>\n                  <mat-error *ngIf=\"patientForm.get('lastName').hasError('required')\">\n                    {{ 'Last-Name-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'Country' | translate }}  </mat-label>\n                  <input matInput formControlName=\"country\"/>\n                  <mat-error *ngIf=\"patientForm.get('country').hasError('required')\">\n                    {{ 'Country-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label>  {{ 'Address' | translate }} </mat-label>\n                  <input matInput formControlName=\"address\"/>\n                  <mat-error *ngIf=\"patientForm.get('address').hasError('required')\">\n                    {{ 'Address-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n              <div class=\"form-group pt-3\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>   {{ 'Passport' | translate }} </mat-label>\n                    <input matInput formControlName=\"passport\"/>\n                    <mat-error *ngIf=\"patientForm.get('passport').hasError('required')\">\n                      {{ 'Passport-Is-Required' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label>  {{ 'Phone' | translate }}</mat-label>\n                  <input matInput formControlName=\"phone\"/>\n                  <mat-error *ngIf=\"patientForm.get('phone').hasError('required')\">\n                     {{ 'Phone-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n      </form>\n    </ng-container>\n    <ng-container *ngIf=\"roles[roles.Doctor] == selectedRole.value\">\n      <form [formGroup]=\"doctorForm\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label>{{ 'First-Name' | translate }} </mat-label>\n                  <input matInput formControlName=\"firstName\"/>\n                  <mat-error *ngIf=\"doctorForm.get('firstName').hasError('required')\">\n                    {{ 'First-Name-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'Last-Name' | translate }} </mat-label>\n                  <input matInput formControlName=\"lastName\"/>\n                  <mat-error *ngIf=\"doctorForm.get('lastName').hasError('required')\">\n                    {{ 'Last-Name-Is-Required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                  <mat-label> {{ 'License' | translate }}</mat-label>\n                  <input matInput formControlName=\"license\"/>\n                  <mat-error *ngIf=\"doctorForm.get('license').hasError('required')\">\n                    {{ 'License-is-required' | translate }}\n                  </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"form-group pt-3\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label> {{ 'Phone' | translate }} </mat-label>\n                <input matInput formControlName=\"phone\"/>\n                <mat-error *ngIf=\"doctorForm.get('phone').hasError('required')\">\n                   {{ 'Phone-Is-Required' | translate }}\n                </mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group pt-3\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>{{ 'MedicalInstitutions' | translate }}</mat-label>\n            <input placeholder=\"Search...\"\n                  matInput\n                  type=\"text\"\n                  formControlName=\"medicalInstitutionId\"\n                  [matAutocomplete]=\"auto\">\n            <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n              <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n                {{option.name}}\n              </mat-option>\n            </mat-autocomplete>\n            <mat-error *ngIf=\"doctorForm.get('medicalInstitutionId').hasError('required')\"> {{ 'Medical-Institution-is-required' | translate }} </mat-error>\n          </mat-form-field>\n        </div>\n      </form>\n    </ng-container>\n    <div>\n      <button mat-button (click)=\"stepper.reset(); clearForm()\">{{ 'Reset' | translate }}</button>\n      <button mat-button matStepperNext>{{ 'Next' | translate }}</button>\n    </div>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>{{ 'Complete' | translate }}</ng-template>\n      <button mat-button matStepperPrevious>{{ 'Back' | translate }}</button>\n      <button mat-button matStepperPrevious color=\"primary\" (click)=\"onSubmit()\">{{ 'SignUp' | translate }}</button>\n      <button mat-button (click)=\"stepper.reset(); clearForm()\">{{ 'Reset' | translate }}</button>\n  </mat-step>\n</mat-vertical-stepper>\n"],"sourceRoot":"webpack:///"}