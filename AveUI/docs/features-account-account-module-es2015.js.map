{"version":3,"sources":["./src/app/features/account/account-info/account-info.component.ts","./src/app/features/account/account-info/account-info.component.html","./src/app/features/account/account-routing.module.ts","./src/app/features/account/account.module.ts","./src/app/features/account/doctor-account/doctor-account.component.ts","./src/app/features/account/doctor-account/doctor-account.component.html"],"names":[],"mappings":"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","file":"features-account-account-module-es2015.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { AccountService } from '../api/account.service.';\nimport { IAccountInfo } from 'src/app/core/interfaces/account-info.interface';\n\n@Component({\n  selector: 'app-account-info',\n  templateUrl: './account-info.component.html',\n  styleUrls: ['./account-info.component.scss']\n})\nexport class AccountInfoComponent implements OnInit, OnDestroy {\n\n\n  accountInfo: IAccountInfo;\n  accountForm: FormGroup;\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private accountService: AccountService,\n              private toastr: ToastrService,\n              public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.getAccountInfo();\n  }\n\n  getAccountInfo(): void {\n    this.accountService.getAccountInfo()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        if (res) {\n          this.accountInfo = res;\n          this.createForm();\n          this.initForm();\n        }\n      });\n  }\n\n  onSubmit(): void {\n    if (this.accountForm.valid) {\n      this.accountService.updateAccountInfo(this.accountForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(() => {\n          this.toastr.success('AccountInfo update succesful!');\n          this.accountForm.markAsUntouched();\n          Object.assign(this.accountInfo, this.accountForm.value);\n        });\n    } else {\n      this.accountForm.markAllAsTouched();\n    }\n  }\n\n  createForm(): void  {\n    this.accountForm = this.formBuilder.group({\n      userName: [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n    });\n  }\n\n  initForm(): void {\n    this.accountForm.get('userName').setValue(this.accountInfo.userName);\n    this.accountForm.get('email').setValue(this.accountInfo.email);\n    this.accountForm.markAsUntouched();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<br>\n<div class=\"m-5\">\n  <mat-card class=\"pane\">\n    <h2> {{ 'Account-Info' | translate }}</h2>\n    <form [formGroup]=\"accountForm\" *ngIf=\"accountInfo\">\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group pt-3\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label> {{ 'UserName' | translate }} </mat-label>\n              <input placeholder=\"Type user name...\" matInput  type=\"text\" formControlName=\"userName\">\n            </mat-form-field>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group pt-3\">\n            <mat-form-field appearance=\"outline\">\n              <mat-label> {{ 'Email' | translate }} </mat-label>\n              <input placeholder=\"Type email...\" matInput  type=\"text\" formControlName=\"email\">\n            </mat-form-field>\n          </div>\n        </div>\n      </div>\n    </form>\n    <mat-card-actions  *ngIf=\"accountInfo && accountForm.touched\">\n      <button mat-button color=\"primary\" (click)=\"onSubmit()\"> {{ 'Update' | translate }}  </button>\n      <button mat-button color=\"warn\" type=\"button\" (click)=\"initForm()\"> {{ 'Cancel' | translate }} </button>\n    </mat-card-actions>\n  </mat-card>\n  <ng-container *ngIf=\"accountInfo?.patient\">\n    <app-patient-account [patientInfo]=\"accountInfo.patient\" [editable]=\"true\"></app-patient-account>\n  </ng-container>\n  <ng-container *ngIf=\"accountInfo?.doctor\">\n    <app-doctor-account [doctorInfo]=\"accountInfo.doctor\" [editable]=\"true\"></app-doctor-account>\n  </ng-container>\n\n</div>\n","import { PatientListComponent } from './patient-list/patient-list.component';\nimport { AccountInfoComponent } from './account-info/account-info.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'info' , pathMatch: 'prefix'},\n  { path: 'info', component: AccountInfoComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccountRoutingModule } from './account-routing.module';\nimport { PatientAccountComponent } from './patient-account/patient-account.component';\nimport { DoctorAccountComponent } from './doctor-account/doctor-account.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { AccountInfoComponent } from './account-info/account-info.component';\nimport { PatientListComponent } from './patient-list/patient-list.component';\nimport { ConfidantsComponent } from './confidants/confidants.component';\n\n\n@NgModule({\n  declarations: [\n    AccountInfoComponent,\n    PatientAccountComponent,\n    DoctorAccountComponent,\n    PatientListComponent,\n    ConfidantsComponent],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    SharedModule\n  ]\n})\nexport class AccountModule { }\n","import { IDoctor } from './../../../core/interfaces/doctor.interface';\nimport { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { map, startWith, takeUntil } from 'rxjs/operators';\nimport { SystemRecordStatus } from 'src/app/core/extension/record.enum';\nimport { configureToastr, toastrTitle } from 'src/app/core/helper';\nimport { IRecord } from 'src/app/core/interfaces/record.interface';\nimport { ISelectInfo } from 'src/app/core/interfaces/select-info.interface';\nimport { AccountService } from '../api/account.service.';\n\n@Component({\n  selector: 'app-doctor-account',\n  templateUrl: './doctor-account.component.html',\n  styleUrls: ['./doctor-account.component.scss']\n})\nexport class DoctorAccountComponent implements OnInit, OnDestroy {\n\n  @Input() doctorInfo: IDoctor;\n  doctorForm: FormGroup;\n  medicalInstitutions: ISelectInfo[] = [];\n  medicalInstitutionOptions: Observable<ISelectInfo[]>;\n  @Input() editable = false;\n\n  private destroy$ = new Subject<void>();\n  constructor(private formBuilder: FormBuilder,\n              private accountService: AccountService,\n              private toastr: ToastrService,\n              public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.createForm();\n    this.initForm();\n    this.getMedicalInstitutions();\n    configureToastr(this.toastr);\n  }\n\n  getMedicalInstitutions(): void {\n    this.accountService.getMedicalInstitutions()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(res => {\n        this.medicalInstitutions = res;\n        this.initFilter();\n      });\n  }\n\n  onSubmit(): void {\n    if (this.doctorForm.valid) {\n      const medicalInstitutionId = this.doctorForm.get('medicalInstitutionId').value;\n\n      if (!(medicalInstitutionId && medicalInstitutionId?.name)) {\n        this.toastr.warning('Please chose medical institution!');\n        return;\n      }\n      this.accountService.updateDoctorInfo({\n        id: this.doctorInfo.id,\n        userId: this.doctorInfo.userId,\n        ...this.doctorForm.value,\n        medicalInstitutionId: medicalInstitutionId.id\n      })\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(() => {\n          this.toastr.success('Doctor info updated');\n          Object.assign(this.doctorInfo, this.doctorForm.value);\n          this.doctorInfo.medicalInstitutionId = medicalInstitutionId.id;\n          this.doctorForm.markAsUntouched();\n        });\n    } else {\n      this.doctorForm.markAllAsTouched();\n    }\n  }\n\n  createForm(): void  {\n    this.doctorForm = this.formBuilder.group({\n      firstName: [null, Validators.required],\n      lastName: [null, Validators.required],\n      license: [null, Validators.required],\n      phone: [null, Validators.required],\n      address: [null, Validators.required],\n      medicalInstitutionId: [null, Validators.required],\n    });\n  }\n\n  initForm(): void {\n    this.doctorForm.get('firstName').setValue(this.doctorInfo.firstName);\n    this.doctorForm.get('lastName').setValue(this.doctorInfo.lastName);\n    this.doctorForm.get('license').setValue(this.doctorInfo.license);\n    this.doctorForm.get('phone').setValue(this.doctorInfo.phone);\n    this.doctorForm.get('medicalInstitutionId').setValue(this.doctorInfo.medicalInstitutionId);\n    this.doctorForm.markAsUntouched();\n  }\n\n  displayFn(element: ISelectInfo): string {\n    return element?.name;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initFilter() {\n    this.medicalInstitutionOptions = this.doctorForm.get('medicalInstitutionId').valueChanges\n    .pipe(\n      startWith(null),\n      map(state => state ? this._filterStates(state) : this.medicalInstitutions.slice())\n    );\n  }\n\n  private _filterStates(value): any[] {\n    const filterValue = value && value.name ? value.name.toLowerCase() : value?.toLowerCase();\n\n    return this.medicalInstitutions.filter(element => element.name.toLowerCase().indexOf(filterValue) === 0);\n  }\n}\n","<br>\n<div class=\"row m-2\">\n  <div class=\"col-6\">\n    <mat-card class=\"pane\">\n      <h2> {{ 'Doctor-Info' | translate }}</h2>\n      <form [formGroup]=\"doctorForm\">\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'First-Name' | translate }} </mat-label>\n                    <input placeholder=\"Type first name...\" matInput  type=\"text\" formControlName=\"firstName\">\n                  </mat-form-field>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'Last-Name' | translate }} </mat-label>\n                    <input placeholder=\"Type last name ...\" matInput  type=\"text\" formControlName=\"lastName\">\n                  </mat-form-field>\n                </div>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-6\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'License' | translate }} </mat-label>\n                    <input placeholder=\"Type license...\" matInput  type=\"text\" formControlName=\"license\">\n                  </mat-form-field>\n                </div>\n              </div>\n              <div class=\"col-md-6\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'Phone' | translate }} </mat-label>\n                    <input placeholder=\"Type phone...\" matInput  type=\"text\" formControlName=\"phone\">\n                  </mat-form-field>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"row\">\n              <div class=\"col-md-6\" *ngIf=\"medicalInstitutions\">\n                <div class=\"form-group pt-3\">\n                  <mat-form-field appearance=\"outline\">\n                    <mat-label> {{ 'Medical-Institution' | translate }} </mat-label>\n                    <input placeholder=\"Search...\"\n                          matInput\n                          type=\"text\"\n                          formControlName=\"medicalInstitutionId\"\n                          [matAutocomplete]=\"auto\">\n                    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n                      <mat-option *ngFor=\"let option of medicalInstitutionOptions | async\" [value]=\"option\">\n                        {{option.name}}\n                      </mat-option>\n                    </mat-autocomplete>\n                  </mat-form-field>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n      <mat-card-actions  *ngIf=\"doctorInfo && doctorForm.touched\">\n        <button mat-button color=\"primary\" (click)=\"onSubmit()\"> {{ 'Update' | translate }}  </button>\n        <button mat-button color=\"warn\" type=\"button\" (click)=\"initForm()\"> {{ 'Cancel' | translate }} </button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n  <div class=\"col-12 pt-3\" *ngIf='editable'>\n    <app-confidants [isPatient]='false' [list]=\"true\" [searchActive]=\"false\"></app-confidants>\n  </div>\n</div>\n"],"sourceRoot":"webpack:///"}